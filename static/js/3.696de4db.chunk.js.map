{"version":3,"sources":["hooks/use-actions.ts","hooks/use-typed-selector.ts","components/Comment.tsx","components/PostsDetails.tsx","components/PostsList.tsx","components/Button.tsx","pages/Posts.tsx"],"names":["useActions","dispatch","useDispatch","bindActionCreators","actionCreators","useTypedSelector","useSelector","Comment","email","body","name","className","PostsDetails","userId","id","title","comments","useState","showComments","setShowComments","to","onClick","prev","length","map","comment","PostsList","state","posts","error","loading","post","Button","children","Posts","fetchPosts","page","setPage","useEffect","prevPage"],"mappings":"mHAAA,8DAIaA,EAAa,WACxB,IAAMC,EAAWC,cAIjB,OAAOC,YAAmBC,IAAgBH,K,gCCT5C,sCAGaI,EAHb,MAGiEC,G,4HCYlDC,EAZc,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC3C,OACE,sBAAKC,UAAU,UAAf,UACE,mBAAGA,UAAU,eAAb,SACE,iCAASD,MAEX,mBAAGC,UAAU,eAAb,SAA6BF,IAC7B,mBAAGE,UAAU,gBAAb,SAA8BH,Q,MC6BrBI,IAjCsB,SAAC,GAMhC,EALJC,OAKK,IAJLC,EAII,EAJJA,GACAC,EAGI,EAHJA,MACAN,EAEI,EAFJA,KACAO,EACI,EADJA,SACI,EACoCC,oBAAS,GAD7C,mBACGC,EADH,KACiBC,EADjB,KAGJ,OACE,sBAAKR,UAAU,gBAAf,UACE,cAAC,IAAD,CAAMS,GAAE,iBAAYN,GAApB,SACE,oBAAIH,UAAU,QAAd,SAAuBI,MAEzB,mBAAGJ,UAAU,OAAb,SAAqBF,IACpBO,GACC,qBACEL,UAAU,gBACVU,QAAS,kBAAMF,GAAgB,SAACG,GAAD,OAAWA,MAF5C,SAIGJ,EACC,qCAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAUO,OAAd,+BAEA,2DAILL,IAAY,OACXF,QADW,IACXA,OADW,EACXA,EAAUQ,KAAI,SAACC,GAAD,OAAa,cAAC,EAAD,eAA8BA,GAAhBA,EAAQX,a,mJCd1CY,EAhBa,WAAO,IAAD,EACErB,aAAiB,SAACsB,GAAD,OAAWA,EAAMC,SAA5DA,EADwB,EACxBA,MAAOC,EADiB,EACjBA,MAAOC,EADU,EACVA,QAEtB,OACE,gCACGA,GAAW,4CACXD,GAAS,6BAAKA,IACf,qBAAKlB,UAAU,aAAf,SACGiB,EAAMJ,KAAI,SAACO,GAAD,OACT,cAACnB,EAAA,EAAD,eAAgCmB,GAAbA,EAAKjB,aCDnBkB,G,MANiB,SAAC,GAAD,IAAGX,EAAH,EAAGA,QAASY,EAAZ,EAAYA,SAAZ,OAC9B,wBAAQtB,UAAU,SAASU,QAASA,EAApC,SACGY,MCeUC,UAlBS,WAAO,IACrBC,EAAenC,cAAfmC,WADoB,EAEJlB,mBAAS,GAFL,mBAErBmB,EAFqB,KAEfC,EAFe,KAQ5B,OAJAC,qBAAU,WACRH,EAAW,CAAEC,WACZ,CAACA,IAGF,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQf,QAAS,kBAAMgB,GAAQ,SAACE,GAAD,OAAcA,EAAW,MAAxD","file":"static/js/3.696de4db.chunk.js","sourcesContent":["import {useDispatch} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {actionCreators} from '../state';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  // will return something like this:\n  // { fetchPosts: dispatch(fetchPosts) }\n  return bindActionCreators(actionCreators, dispatch);\n};\n","import {useSelector, TypedUseSelectorHook} from 'react-redux';\nimport {RootState} from '../state';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Comment as C } from '../state/reducers/posts-reducer';\nimport './comment.css';\n\nconst Comment: React.FC<C> = ({ email, body, name }) => {\n  return (\n    <div className=\"comment\">\n      <p className=\"comment-name\">\n        <strong>{name}</strong>\n      </p>\n      <p className=\"comment-body\">{body}</p>\n      <p className=\"comment-email\">{email}</p>\n    </div>\n  );\n};\n\nexport default Comment;\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Post } from '../state/reducers/posts-reducer';\nimport Comment from './Comment';\nimport './posts-details.css';\n\nconst PostsDetails: React.FC<Post> = ({\n  userId,\n  id,\n  title,\n  body,\n  comments,\n}) => {\n  const [showComments, setShowComments] = useState(true);\n\n  return (\n    <div className=\"posts-details\">\n      <Link to={`/posts/${id}`}>\n        <h3 className=\"title\">{title}</h3>\n      </Link>\n      <p className=\"body\">{body}</p>\n      {comments && (\n        <div\n          className=\"comment-title\"\n          onClick={() => setShowComments((prev) => !prev)}\n        >\n          {showComments ? (\n            <p>{comments?.length} comments (click to hide)</p>\n          ) : (\n            <p>(click to show comments)</p>\n          )}\n        </div>\n      )}\n      {showComments &&\n        comments?.map((comment) => <Comment key={comment.id} {...comment} />)}\n    </div>\n  );\n};\n\nexport default PostsDetails;\n","import { useTypedSelector } from '../hooks/use-typed-selector';\nimport PostsDetails from './PostsDetails';\nimport './posts-list.css';\n\nconst PostsList: React.FC = () => {\n  const { posts, error, loading } = useTypedSelector((state) => state.posts);\n\n  return (\n    <div>\n      {loading && <h3>Loading...</h3>}\n      {error && <h3>{error}</h3>}\n      <div className=\"posts-list\">\n        {posts.map((post) => (\n          <PostsDetails key={post.id} {...post} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PostsList;\n","import './button.css';\n\ninterface Props {\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nconst Button: React.FC<Props> = ({ onClick, children }) => (\n  <button className=\"button\" onClick={onClick}>\n    {children}\n  </button>\n);\n\nexport default Button;\n","import { useEffect, useState } from 'react';\nimport { useActions } from '../hooks/use-actions';\nimport PostsList from '../components/PostsList';\nimport Button from '../components/Button';\n\nconst Posts: React.FC = () => {\n  const { fetchPosts } = useActions();\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    fetchPosts({ page });\n  }, [page]);\n\n  return (\n    <>\n      <PostsList />\n      <Button onClick={() => setPage((prevPage) => prevPage + 1)}>\n        Load more\n      </Button>\n    </>\n  );\n};\n\nexport default Posts;\n"],"sourceRoot":""}