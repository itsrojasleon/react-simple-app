{"version":3,"sources":["hooks/use-actions.ts","hooks/use-typed-selector.ts","components/Comment.tsx","components/PostsDetails.tsx","pages/Post.tsx"],"names":["useActions","dispatch","useDispatch","bindActionCreators","actionCreators","useTypedSelector","useSelector","Comment","email","body","name","className","PostsDetails","userId","id","title","comments","useState","showComments","setShowComments","to","onClick","prev","length","map","comment","Post","fetchPost","state","posts","post","error","loading","postId","useParams","useEffect","parseInt"],"mappings":"mHAAA,8DAIaA,EAAa,WACxB,IAAMC,EAAWC,cAIjB,OAAOC,YAAmBC,IAAgBH,K,gCCT5C,sCAGaI,EAHb,MAGiEC,G,4HCYlDC,EAZc,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC3C,OACE,sBAAKC,UAAU,UAAf,UACE,mBAAGA,UAAU,eAAb,SACE,iCAASD,MAEX,mBAAGC,UAAU,eAAb,SAA6BF,IAC7B,mBAAGE,UAAU,gBAAb,SAA8BH,Q,MC6BrBI,IAjCsB,SAAC,GAMhC,EALJC,OAKK,IAJLC,EAII,EAJJA,GACAC,EAGI,EAHJA,MACAN,EAEI,EAFJA,KACAO,EACI,EADJA,SACI,EACoCC,oBAAS,GAD7C,mBACGC,EADH,KACiBC,EADjB,KAGJ,OACE,sBAAKR,UAAU,gBAAf,UACE,cAAC,IAAD,CAAMS,GAAE,iBAAYN,GAApB,SACE,oBAAIH,UAAU,QAAd,SAAuBI,MAEzB,mBAAGJ,UAAU,OAAb,SAAqBF,IACpBO,GACC,qBACEL,UAAU,gBACVU,QAAS,kBAAMF,GAAgB,SAACG,GAAD,OAAWA,MAF5C,SAIGJ,EACC,qCAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAUO,OAAd,+BAEA,2DAILL,IAAY,OACXF,QADW,IACXA,OADW,EACXA,EAAUQ,KAAI,SAACC,GAAD,OAAa,cAAC,EAAD,eAA8BA,GAAhBA,EAAQX,a,gGCR1CY,UApBQ,WAAO,IACpBC,EAAc3B,cAAd2B,UADmB,EAEMtB,aAAiB,SAACuB,GAAD,OAAWA,EAAMC,SAA3DC,EAFmB,EAEnBA,KAAMC,EAFa,EAEbA,MAAOC,EAFM,EAENA,QACbC,EAAWC,cAAXD,OAMR,OAJAE,qBAAU,WACRR,EAAU,CAAEb,GAAIsB,SAASH,OACxB,CAACA,IAEAD,EAAgB,4CACfF,EACDC,EAAc,8BAAMA,IAGtB,8BACE,cAAC,IAAD,eAAkBD,MALJ","file":"static/js/4.cc8e582b.chunk.js","sourcesContent":["import {useDispatch} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {actionCreators} from '../state';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  // will return something like this:\n  // { fetchPosts: dispatch(fetchPosts) }\n  return bindActionCreators(actionCreators, dispatch);\n};\n","import {useSelector, TypedUseSelectorHook} from 'react-redux';\nimport {RootState} from '../state';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Comment as C } from '../state/reducers/posts-reducer';\nimport './comment.css';\n\nconst Comment: React.FC<C> = ({ email, body, name }) => {\n  return (\n    <div className=\"comment\">\n      <p className=\"comment-name\">\n        <strong>{name}</strong>\n      </p>\n      <p className=\"comment-body\">{body}</p>\n      <p className=\"comment-email\">{email}</p>\n    </div>\n  );\n};\n\nexport default Comment;\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Post } from '../state/reducers/posts-reducer';\nimport Comment from './Comment';\nimport './posts-details.css';\n\nconst PostsDetails: React.FC<Post> = ({\n  userId,\n  id,\n  title,\n  body,\n  comments,\n}) => {\n  const [showComments, setShowComments] = useState(true);\n\n  return (\n    <div className=\"posts-details\">\n      <Link to={`/posts/${id}`}>\n        <h3 className=\"title\">{title}</h3>\n      </Link>\n      <p className=\"body\">{body}</p>\n      {comments && (\n        <div\n          className=\"comment-title\"\n          onClick={() => setShowComments((prev) => !prev)}\n        >\n          {showComments ? (\n            <p>{comments?.length} comments (click to hide)</p>\n          ) : (\n            <p>(click to show comments)</p>\n          )}\n        </div>\n      )}\n      {showComments &&\n        comments?.map((comment) => <Comment key={comment.id} {...comment} />)}\n    </div>\n  );\n};\n\nexport default PostsDetails;\n","import { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport PostsDetails from '../components/PostsDetails';\n\nconst Post: React.FC = () => {\n  const { fetchPost } = useActions();\n  const { post, error, loading } = useTypedSelector((state) => state.posts);\n  const { postId } = useParams<{ postId: string }>();\n\n  useEffect(() => {\n    fetchPost({ id: parseInt(postId) });\n  }, [postId]);\n\n  if (loading) return <h3>Loading...</h3>;\n  if (!post) return <h3>Post did not found!</h3>;\n  if (error) return <div>{error}</div>;\n\n  return (\n    <div>\n      <PostsDetails {...post} />\n    </div>\n  );\n};\n\nexport default Post;\n"],"sourceRoot":""}